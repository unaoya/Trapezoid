import Mathlib.Analysis.SpecialFunctions.Trigonometric.InverseDeriv
import Trapezoid.Defs
import Trapezoid.LA

noncomputable section

open Real

lemma polarCoord_symm_deriv_det (p : ‚Ñù¬≤) :
    (fderiv ‚Ñù polarCoord.symm p).det = p.1 := by
  rw [HasFDerivAt.fderiv (hasFDerivAt_polarCoord_symm p)]
  apply det_fderivPolarCoordSymm

lemma polarCoord_symm_diffble (p : ‚Ñù¬≤) :
    DifferentiableAt ‚Ñù polarCoord.symm p :=
  HasFDerivAt.differentiableAt (hasFDerivAt_polarCoord_symm p)

def matrixPolarCoordSymm (p : ‚Ñù¬≤) :=
  !![cos p.2, -p.1 * sin p.2; sin p.2, p.1 * cos p.2]

lemma matrixPolarCoordSymm_det (p : ‚Ñù¬≤) :
    (matrixPolarCoordSymm p).det = p.1 := by
  rw [matrixPolarCoordSymm, Matrix.det_fin_two_of]
  calc
    cos p.2 * (p.1 * cos p.2) - (-p.1 * sin p.2) * sin p.2
      = p.1 * (cos p.2 ^ 2 + sin p.2 ^ 2) := by ring
    _ = p.1 := by simp

def fderivPolarCoordSymmEquiv' (p : ‚Ñù¬≤) (h‚ÇÄ : p.1 ‚â† 0) :
    ‚Ñù¬≤ ‚âÉ‚Çó[‚Ñù] ‚Ñù¬≤ := by
  apply LinearEquiv.ofIsUnitDet (v := (Basis.finTwoProd ‚Ñù))
    (v' := (Basis.finTwoProd ‚Ñù))
    (f := (Matrix.toLin (Basis.finTwoProd ‚Ñù) (Basis.finTwoProd ‚Ñù)
      (matrixPolarCoordSymm p)))
  simp [matrixPolarCoordSymm_det]
  exact h‚ÇÄ

lemma fderivPolarCoordSymmEquiv'_det (p : ‚Ñù¬≤) (h‚ÇÄ : p.1 ‚â† 0) :
    (fderivPolarCoordSymmEquiv' p h‚ÇÄ).det = p.1 := by
  simp [fderivPolarCoordSymmEquiv']
  exact matrixPolarCoordSymm_det _

def fderivPolarCoordSymmEquiv (p : ‚Ñù¬≤) (h‚ÇÄ : p.1 ‚â† 0) :=
  LinearEquiv.toContinuousLinearEquiv (fderivPolarCoordSymmEquiv' _ h‚ÇÄ)

lemma fderivPolarCoordSymmEquiv_det (p : ‚Ñù¬≤) (h‚ÇÄ : p.1 ‚â† 0) :
  (fderivPolarCoordSymmEquiv p h‚ÇÄ).det = p.1 := by
  simp [fderivPolarCoordSymmEquiv, fderivPolarCoordSymmEquiv']
  exact matrixPolarCoordSymm_det _

lemma hasFDerivAt_polarCoord (x : ‚Ñù¬≤) (h‚ÇÄ : (polarCoord x).1 ‚â† 0)
    (hx : x ‚àà polarCoord.symm.target) :
  HasFDerivAt (ùïú := ‚Ñù) polarCoord
    (fderivPolarCoordSymmEquiv (polarCoord x) h‚ÇÄ).symm x := by
  apply PartialHomeomorph.hasFDerivAt_symm polarCoord.symm hx
  exact hasFDerivAt_polarCoord_symm (polarCoord x)

lemma fderivAt_polarCoord (x : ‚Ñù¬≤) (hx : x ‚àà polarCoord.symm.target)
    (h‚ÇÄ : (polarCoord x).1 ‚â† 0) :
  fderiv ‚Ñù polarCoord x = (fderivPolarCoordSymmEquiv (polarCoord x) h‚ÇÄ).symm := by
  apply HasFDerivAt.fderiv
  exact hasFDerivAt_polarCoord _ _ hx

lemma polarCoord_deriv_det (x : ‚Ñù¬≤) (hx : x ‚àà polarCoord.symm.target)
    (h‚ÇÄ : (polarCoord x).1 ‚â† 0) :
    (fderiv ‚Ñù polarCoord x).det = (polarCoord x).1‚Åª¬π := by
  rw [fderivAt_polarCoord x hx h‚ÇÄ]
  rw [fderivPolarCoordSymmEquiv]
  rw [ContinuousLinearEquiv.det_coe_symm]
  rw [aux]
  rw [LinearEquiv.toLinearEquiv_toContinuousLinearEquiv]
  rw [fderivPolarCoordSymmEquiv'_det]

lemma polarCoord_diffble (p : ‚Ñù¬≤) (hp : p ‚àà polarCoord.symm.target)
    (h : (polarCoord p).1 ‚â† 0) : DifferentiableAt ‚Ñù polarCoord p := by
  apply HasFDerivAt.differentiableAt
  apply PartialHomeomorph.hasFDerivAt_symm polarCoord.symm hp
      (f' := (fderivPolarCoordSymmEquiv (polarCoord p) h))
  apply hasFDerivAt_polarCoord_symm (polarCoord p)

#check fderivPiPolarCoordSymm
#check hasFDerivAt_pi_polarCoord_symm
