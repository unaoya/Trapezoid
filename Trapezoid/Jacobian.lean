import Trapezoid.Defs
import Trapezoid.PolarCoord
import Mathlib.Analysis.SpecialFunctions.Trigonometric.InverseDeriv

open Metric Real

noncomputable section

variable {ùïú : Type*} [NontriviallyNormedField ùïú]
    {E‚ÇÅ E‚ÇÇ E‚ÇÉ E‚ÇÑ : Type*}
    [NormedAddCommGroup E‚ÇÅ] [NormedSpace ùïú E‚ÇÅ]
    [NormedAddCommGroup E‚ÇÇ] [NormedSpace ùïú E‚ÇÇ]
    [NormedAddCommGroup E‚ÇÉ] [NormedSpace ùïú E‚ÇÉ]
    [NormedAddCommGroup E‚ÇÑ] [NormedSpace ùïú E‚ÇÑ]
    {f : E‚ÇÅ ‚Üí E‚ÇÇ} (x : E‚ÇÅ) {g : E‚ÇÇ ‚Üí E‚ÇÉ} {h : E‚ÇÉ ‚Üí E‚ÇÑ}

lemma DifferentiableAt.comp‚ÇÇ (hh : DifferentiableAt ùïú h (g (f x)))
    (hg : DifferentiableAt ùïú g (f x)) (hf : DifferentiableAt ùïú f x) :
    DifferentiableAt ùïú (h ‚àò g ‚àò f) x := by
  apply DifferentiableAt.comp
  exact hh
  exact DifferentiableAt.comp _ hg hf

lemma fderiv_comp‚ÇÇ (hh : DifferentiableAt ùïú h (g (f x)))
    (hg : DifferentiableAt ùïú g (f x)) (hf : DifferentiableAt ùïú f x) :
    fderiv ùïú (h ‚àò g ‚àò f) x =
      (fderiv ùïú h (g (f x))).comp ((fderiv ùïú g (f x)).comp (fderiv ùïú f x)) := by
  rw [fderiv_comp _ _ _, fderiv_comp _ hg hf]
  rfl
  exact hh
  exact DifferentiableAt.comp _ hg hf

lemma deriv_comp‚ÇÇ (x : ùïú) {f g h : ùïú ‚Üí ùïú}
    (hf : DifferentiableAt ùïú f (g (h x)))
    (hg : DifferentiableAt ùïú g (h x))
    (hh : DifferentiableAt ùïú h x) :
    deriv (f ‚àò g ‚àò h) x =
      deriv f (g (h x)) * deriv g (h x) * deriv h x := by
  rw [deriv_comp _ _ _, deriv_comp _ hg hh]
  simp
  ring_nf
  exact hf
  exact DifferentiableAt.comp x hg hh

end

noncomputable section

lemma phi_decomp : œÜ = (arcsin ‚àò (fun x => 2 / x) ‚àò (fun r => (r ^ 2))) := rfl

@[simp]
lemma differentiable_2_div_x {x : ‚Ñù} (h‚ÇÄ : x ‚â† 0) :
    DifferentiableAt ‚Ñù (fun x => 2 / x) (x ^ 2) := by
  apply DifferentiableAt.div <;> simp [h‚ÇÄ]

lemma differentiable_phi (r : ‚Ñù) (h‚ÇÄ : r ‚â† 0)
    (h‚ÇÅ : ¬¨2 / r ^ 2 = -1) (h‚ÇÇ : ¬¨2 / r ^ 2 = 1) :
    DifferentiableAt ‚Ñù œÜ r := by
  rw [phi_decomp]
  apply DifferentiableAt.comp‚ÇÇ
  ¬∑ exact Real.differentiableAt_arcsin.mpr ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
  ¬∑ simp [h‚ÇÄ]
  ¬∑ simp

def deriv_phi (r : ‚Ñù) : ‚Ñù :=
  (‚àö(1 - (2 / r ^ 2) ^ 2))‚Åª¬π * (-2 / (r ^ 2) ^ 2) * (2 * r)

lemma deriv_phi_eq (r : ‚Ñù) (h‚ÇÄ : r ‚â† 0)
    (h‚ÇÅ : ¬¨2 / r ^ 2 = -1) (h‚ÇÇ : ¬¨2 / r ^ 2 = 1) :
    deriv œÜ r = deriv_phi r := by
  rw [phi_decomp, deriv_comp‚ÇÇ, deriv_arcsin, deriv_pow, deriv_div]
  simp
  any_goals simp [h‚ÇÄ]
  ¬∑ rfl
  ¬∑ exact Real.differentiableAt_arcsin.mpr ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©

open ContinuousLinearMap

def g‚ÇÅ : ‚Ñù¬≤ ‚Üí ‚Ñù := Prod.fst

def g‚ÇÇ : ‚Ñù¬≤ ‚Üí ‚Ñù := Prod.snd + œÜ.comp Prod.fst

def fderiv_g‚ÇÇ (p : ‚Ñù¬≤) :=
  snd ‚Ñù ‚Ñù ‚Ñù + (lsmul ‚Ñù ‚Ñù (deriv_phi p.fst)).comp (fst ‚Ñù ‚Ñù ‚Ñù)

lemma hasfderiv_g‚ÇÇ (p : ‚Ñù¬≤) (h‚ÇÄ : p.1 ‚â† 0) (h‚ÇÅ : ¬¨2 / p.1 ^ 2 = -1)
    (h‚ÇÇ : ¬¨2 / p.1 ^ 2 = 1) : HasFDerivAt g‚ÇÇ (fderiv_g‚ÇÇ p) p := by
  apply HasFDerivAt.add
  ¬∑ exact hasFDerivAt_snd
  ¬∑ apply HasFDerivAt.comp
    ¬∑ have := deriv_phi_eq _ h‚ÇÄ h‚ÇÅ h‚ÇÇ
      simp [‚Üê this, hasFDerivAt_iff_hasDerivAt]
      exact differentiable_phi _ h‚ÇÄ h‚ÇÅ h‚ÇÇ
    ¬∑ exact hasFDerivAt_fst

lemma g_diffble (p : ‚Ñù¬≤) (h‚ÇÄ : p.1 ‚â† 0)
    (h‚ÇÅ : ¬¨2 / p.1 ^ 2 = -1) (h‚ÇÇ : ¬¨2 / p.1 ^ 2 = 1) :
    DifferentiableAt ‚Ñù g p := by
  apply DifferentiableAt.prod
  ¬∑ simp
  ¬∑ refine DifferentiableAt.add ?_ ?_
    ¬∑ exact differentiableAt_snd
    ¬∑ have : (fun (x : ‚Ñù¬≤) ‚Ü¶ œÜ x.1) = ((fun x => œÜ x) ‚àò (fun x => x.1)) := rfl
      rw [this]
      apply DifferentiableAt.comp
      ¬∑ exact differentiable_phi _ h‚ÇÄ h‚ÇÅ h‚ÇÇ
      ¬∑ simp

def fderiv_g (p : ‚Ñù¬≤) := (fst ‚Ñù ‚Ñù ‚Ñù).prod (fderiv_g‚ÇÇ p)

lemma fderiv_g_det : (fderiv_g p).det = 1 := by
  have : (fderiv_g p) =
    LinearMap.toContinuousLinearMap
      (
        (Matrix.toLin
          (Basis.finTwoProd ‚Ñù) (Basis.finTwoProd ‚Ñù))
        !![1, 0; deriv_phi p.1, 1]
      ) := by ext <;> simp [fderiv_g, fderiv_g‚ÇÇ]
  simp [this]

lemma hasfderiv_g (p : ‚Ñù¬≤) (h‚ÇÄ : p.1 ‚â† 0) (h‚ÇÅ : ¬¨2 / p.1 ^ 2 = -1)
    (h‚ÇÇ : ¬¨2 / p.1 ^ 2 = 1) : HasFDerivAt g (fderiv_g p) p := by
  apply HasFDerivAt.prod
  exact hasFDerivAt_fst
  exact hasfderiv_g‚ÇÇ _ h‚ÇÄ h‚ÇÅ h‚ÇÇ

lemma g_deriv_det (p : ‚Ñù¬≤) (h‚ÇÄ : p.1 ‚â† 0) (h‚ÇÅ : ¬¨2 / p.1 ^ 2 = -1)
    (h‚ÇÇ : ¬¨2 / p.1 ^ 2 = 1) : (fderiv ‚Ñù g p).det = 1 := by
  rw [HasFDerivAt.fderiv (hasfderiv_g _ h‚ÇÄ h‚ÇÅ h‚ÇÇ)]
  apply fderiv_g_det

lemma jf_eq_1 (p : ‚Ñù¬≤) (h‚ÇÄ : (polarCoord p).1 ‚â† 0)
    (h‚ÇÅ : ¬¨2 / (polarCoord p).1 ^ 2 = -1) (h‚ÇÇ : ¬¨2 / (polarCoord p).1 ^ 2 = 1)
    (hp : p ‚àà polarCoord.symm.target) : (fderiv ‚Ñù f p).det = 1 := by
  rw [f, fderiv_comp‚ÇÇ]
  repeat rw [ContinuousLinearMap.det_comp]
  rw [g_deriv_det _ h‚ÇÄ h‚ÇÅ h‚ÇÇ, polarCoord_deriv_det _ hp h‚ÇÄ, polarCoord_symm_deriv_det]
  simp
  exact CommGroupWithZero.mul_inv_cancel _ h‚ÇÄ
  exact polarCoord_symm_diffble _
  exact g_diffble _ h‚ÇÄ h‚ÇÅ h‚ÇÇ
  exact polarCoord_diffble _ hp h‚ÇÄ
