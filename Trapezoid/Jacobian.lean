import Trapezoid.Defs
import Mathlib.Analysis.SpecialFunctions.Trigonometric.InverseDeriv
import Mathlib.Analysis.SpecialFunctions.Trigonometric.Bounds

open Metric Real

noncomputable section

lemma ContinuousLinearMap.det_comp (E : Type) [TopologicalSpace E]
    [AddCommGroup E] [Module ‚Ñù E] (f g : E ‚ÜíL[‚Ñù] E) :
    (f.comp g).det = f.det * g.det := by
  have (h : E ‚ÜíL[‚Ñù] E) : h.det = (h : E ‚Üí‚Çó[‚Ñù] E).det := rfl
  repeat rw [this]
  rw [‚Üê LinearMap.det_comp]
  exact rfl

lemma phi_decomp :
    œÜ = (arcsin ‚àò (fun x => 2 / x) ‚àò (fun r => (r ^ 2))) := rfl

lemma differentiable_2_div_x (x : ‚Ñù) (h‚ÇÄ : x ‚â† 0) :
    DifferentiableAt ‚Ñù (fun x => 2 / x) x := by
  refine DifferentiableAt.div ?_ ?_ h‚ÇÄ
  ¬∑ exact differentiableAt_const 2
  ¬∑ exact differentiableAt_id'

lemma differentiable_phi (r : ‚Ñù) (h‚ÇÄ : r ‚â† 0)
    (h‚ÇÅ : ¬¨2 / r ^ 2 = -1) (h‚ÇÇ : ¬¨2 / r ^ 2 = 1) :
    DifferentiableAt ‚Ñù œÜ r := by
  rw [phi_decomp]
  apply DifferentiableAt.comp
  ¬∑ exact Real.differentiableAt_arcsin.mpr ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
  ¬∑ apply DifferentiableAt.comp
    ¬∑ apply differentiable_2_div_x
      exact pow_ne_zero 2 h‚ÇÄ
    ¬∑ exact differentiableAt_pow 2

def deriv_phi (r : ‚Ñù) : ‚Ñù :=
  (‚àö(1 - (2 / r ^ 2) ^ 2))‚Åª¬π * (-2 / (r ^ 2) ^ 2 * (2 * r))

lemma deriv_phi_eq (r : ‚Ñù) (h‚ÇÄ : r ‚â† 0)
    (h‚ÇÅ : ¬¨2 / r ^ 2 = -1) (h‚ÇÇ : ¬¨2 / r ^ 2 = 1) :
    deriv œÜ r = deriv_phi r := by
  rw [phi_decomp, deriv_comp, deriv_comp]
  rw [deriv_arcsin, deriv_pow, deriv_div]
  simp
  rfl
  ¬∑ exact differentiableAt_const 2
  ¬∑ exact differentiableAt_id'
  ¬∑ exact pow_ne_zero 2 h‚ÇÄ
  ¬∑ apply differentiable_2_div_x
    exact pow_ne_zero 2 h‚ÇÄ
  ¬∑ exact differentiableAt_pow 2
  ¬∑ exact Real.differentiableAt_arcsin.mpr ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
  ¬∑ apply DifferentiableAt.comp
    ¬∑ apply differentiable_2_div_x
      exact pow_ne_zero 2 h‚ÇÄ
    ¬∑ exact differentiableAt_pow 2

lemma g_diffble (p : ‚Ñù¬≤) (h‚ÇÄ : p.1 ‚â† 0)
    (h‚ÇÅ : ¬¨2 / p.1 ^ 2 = -1) (h‚ÇÇ : ¬¨2 / p.1 ^ 2 = 1) :
    DifferentiableAt ‚Ñù g p := by
  apply DifferentiableAt.prod
  ¬∑ exact differentiableAt_fst
  ¬∑ refine DifferentiableAt.add ?_ ?_
    ¬∑ exact differentiableAt_snd
    ¬∑ have : (fun (x : ‚Ñù¬≤) ‚Ü¶ œÜ x.1) = ((fun x => œÜ x) ‚àò (fun x => x.1)) := rfl
      rw [this]
      apply DifferentiableAt.comp
      ¬∑ exact differentiable_phi _ h‚ÇÄ h‚ÇÅ h‚ÇÇ
      ¬∑ exact differentiableAt_fst

def fderiv_g (p : ‚Ñù¬≤) :=
  LinearMap.toContinuousLinearMap
    (
      (Matrix.toLin
        (Basis.finTwoProd ‚Ñù) (Basis.finTwoProd ‚Ñù))
      !![1, 0; deriv_phi p.1, 1]
    )

lemma fderiv_g_det (p : ‚Ñù¬≤) :
    (fderiv_g p).det = 1 := by simp [fderiv_g]

def g‚ÇÅ (p : ‚Ñù¬≤) : ‚Ñù := p.1

def Basis.One : Basis (Fin 1) ‚Ñù ‚Ñù :=
  Basis.ofEquivFun (LinearEquiv.funUnique (Fin 1) ‚Ñù ‚Ñù).symm

def fderiv_g‚ÇÅ (_ : ‚Ñù¬≤) :=
  LinearMap.toContinuousLinearMap
    (
      (Matrix.toLin
        (Basis.finTwoProd ‚Ñù) (Basis.One))
      !![1, 0]
    )

def fderiv_g‚ÇÅ' := ContinuousLinearMap.fst ‚Ñù ‚Ñù ‚Ñù

lemma fderiv_g‚ÇÅ_rw (p : ‚Ñù¬≤) :
  fderiv_g‚ÇÅ p = fderiv_g‚ÇÅ' := by
  ext
  simp [fderiv_g‚ÇÅ', fderiv_g‚ÇÅ, Matrix.toLin_apply, Basis.One]
  simp [fderiv_g‚ÇÅ', fderiv_g‚ÇÅ, Matrix.toLin_apply, Basis.One]

lemma hasfderiv_g‚ÇÅ (p : ‚Ñù¬≤) : HasFDerivAt g‚ÇÅ (fderiv_g‚ÇÅ p) p := by
  have : g‚ÇÅ = Prod.fst := by rfl
  rw [this, fderiv_g‚ÇÅ_rw]
  apply hasFDerivAt_fst

def g‚ÇÇ (p : ‚Ñù¬≤) : ‚Ñù := p.2 + œÜ p.1

lemma g‚ÇÇ_decomp :
    g‚ÇÇ = (fun p => Prod.snd p + (œÜ ‚àò Prod.fst) p) := rfl

def fderiv_g‚ÇÇ (p : ‚Ñù¬≤) :=
  LinearMap.toContinuousLinearMap
    (
      (Matrix.toLin
        (Basis.finTwoProd ‚Ñù) (Basis.One))
      !![deriv_phi p.1, 1]
    )

def fderiv_g‚ÇÇ‚ÇÅ := ContinuousLinearMap.snd ‚Ñù ‚Ñù ‚Ñù

def fderiv_g‚ÇÇ‚ÇÇ (p : ‚Ñù) :=
  (ContinuousLinearMap.lsmul ‚Ñù ‚Ñù (deriv_phi p)).comp
    (ContinuousLinearMap.fst ‚Ñù ‚Ñù ‚Ñù)

lemma frediv_g‚ÇÇ_rw (p : ‚Ñù¬≤) :
    fderiv_g‚ÇÇ p = fderiv_g‚ÇÇ‚ÇÅ + fderiv_g‚ÇÇ‚ÇÇ p.fst := by
  ext
  simp [fderiv_g‚ÇÇ‚ÇÅ, fderiv_g‚ÇÇ‚ÇÇ, fderiv_g‚ÇÇ, Matrix.toLin_apply, Basis.One]
  simp [fderiv_g‚ÇÇ‚ÇÅ, fderiv_g‚ÇÇ‚ÇÇ, fderiv_g‚ÇÇ, Matrix.toLin_apply, Basis.One]

lemma hasfderiv_g‚ÇÇ (p : ‚Ñù¬≤) (h‚ÇÄ : p.1 ‚â† 0) (h‚ÇÅ : ¬¨2 / p.1 ^ 2 = -1)
    (h‚ÇÇ : ¬¨2 / p.1 ^ 2 = 1) : HasFDerivAt g‚ÇÇ (fderiv_g‚ÇÇ p) p := by
  rw [g‚ÇÇ_decomp, frediv_g‚ÇÇ_rw]
  apply HasFDerivAt.add
  ¬∑ exact hasFDerivAt_snd
  ¬∑ apply HasFDerivAt.comp
    ¬∑ have := deriv_phi_eq p.1 h‚ÇÄ h‚ÇÅ h‚ÇÇ
      simp [‚Üê this, hasFDerivAt_iff_hasDerivAt]
      exact differentiable_phi _ h‚ÇÄ h‚ÇÅ h‚ÇÇ
    ¬∑ exact hasFDerivAt_fst

lemma hasfderiv_g (p : ‚Ñù¬≤) (h‚ÇÄ : p.1 ‚â† 0) (h‚ÇÅ : ¬¨2 / p.1 ^ 2 = -1)
    (h‚ÇÇ : ¬¨2 / p.1 ^ 2 = 1) : HasFDerivAt g (fderiv_g p) p := by
  apply HasFDerivAt.prod (f‚ÇÅ' := fderiv_g‚ÇÅ p) (f‚ÇÇ' := fderiv_g‚ÇÇ p)
  exact hasfderiv_g‚ÇÅ p
  exact hasfderiv_g‚ÇÇ p h‚ÇÄ h‚ÇÅ h‚ÇÇ

lemma fderiv_g_eq (p : ‚Ñù¬≤) (h‚ÇÄ : p.1 ‚â† 0) (h‚ÇÅ : ¬¨2 / p.1 ^ 2 = -1)
    (h‚ÇÇ : ¬¨2 / p.1 ^ 2 = 1) : fderiv ‚Ñù g p = fderiv_g p :=
  HasFDerivAt.fderiv (hasfderiv_g p h‚ÇÄ h‚ÇÅ h‚ÇÇ)

lemma g_deriv_det (p : ‚Ñù¬≤) (h‚ÇÄ : p.1 ‚â† 0) (h‚ÇÅ : ¬¨2 / p.1 ^ 2 = -1)
    (h‚ÇÇ : ¬¨2 / p.1 ^ 2 = 1) : (fderiv ‚Ñù g p).det = 1 := by
  rw [fderiv_g_eq p h‚ÇÄ h‚ÇÅ h‚ÇÇ]
  exact fderiv_g_det p

lemma polarCoord_symm_deriv_det (p : ‚Ñù¬≤) :
    (fderiv ‚Ñù polarCoord.symm p).det = p.1 := by
  rw [HasFDerivAt.fderiv (hasFDerivAt_polarCoord_symm p)]
  apply det_fderivPolarCoordSymm

lemma polarCoord_symm_diffble (p : ‚Ñù¬≤) :
    DifferentiableAt ‚Ñù polarCoord.symm p :=
  HasFDerivAt.differentiableAt (hasFDerivAt_polarCoord_symm p)

def matrixPolarCoordSymm (p : ‚Ñù¬≤) :=
  !![cos p.2, -p.1 * sin p.2; sin p.2, p.1 * cos p.2]

lemma matrixPolarCoordSymm_det (p : ‚Ñù¬≤) :
    (matrixPolarCoordSymm p).det = p.1 := by
  rw [matrixPolarCoordSymm, Matrix.det_fin_two_of]
  calc
    cos p.2 * (p.1 * cos p.2) - (-p.1 * sin p.2) * sin p.2
        = p.1 * (cos p.2 ^ 2 + sin p.2 ^ 2) := by ring
    _ = p.1 := by simp

def fderivPolarCoordSymmEquiv' (p : ‚Ñù¬≤) (h‚ÇÄ : p.1 ‚â† 0) :
    ‚Ñù¬≤ ‚âÉ‚Çó[‚Ñù] ‚Ñù¬≤ := by
  apply LinearEquiv.ofIsUnitDet (v := (Basis.finTwoProd ‚Ñù))
    (v' := (Basis.finTwoProd ‚Ñù))
    (f := (Matrix.toLin (Basis.finTwoProd ‚Ñù) (Basis.finTwoProd ‚Ñù)
      (matrixPolarCoordSymm p)))
  simp [matrixPolarCoordSymm_det]
  exact h‚ÇÄ

lemma fderivPolarCoordSymmEquiv'_det (p : ‚Ñù¬≤) (h‚ÇÄ : p.1 ‚â† 0) :
    (fderivPolarCoordSymmEquiv' p h‚ÇÄ).det = p.1 := by
  simp [fderivPolarCoordSymmEquiv']
  exact matrixPolarCoordSymm_det p

def fderivPolarCoordSymmEquiv (p : ‚Ñù¬≤) (h‚ÇÄ : p.1 ‚â† 0) :=
  LinearEquiv.toContinuousLinearEquiv (fderivPolarCoordSymmEquiv' p h‚ÇÄ)

lemma fderivPolarCoordSymmEquiv_det (p : ‚Ñù¬≤) (h‚ÇÄ : p.1 ‚â† 0) :
  (fderivPolarCoordSymmEquiv p h‚ÇÄ).det = p.1 := by
  simp [fderivPolarCoordSymmEquiv, fderivPolarCoordSymmEquiv']
  exact matrixPolarCoordSymm_det p

lemma hasFDerivAt_polarCoord (x : ‚Ñù¬≤) (h‚ÇÄ : (polarCoord x).1 ‚â† 0)
    (hx : x ‚àà polarCoord.symm.target) :
  HasFDerivAt (ùïú := ‚Ñù) polarCoord
    (fderivPolarCoordSymmEquiv (polarCoord x) h‚ÇÄ).symm x := by
  apply PartialHomeomorph.hasFDerivAt_symm polarCoord.symm hx
  exact hasFDerivAt_polarCoord_symm (polarCoord x)

lemma fderivAt_polarCoord (x : ‚Ñù¬≤) (hx : x ‚àà polarCoord.symm.target)
    (h‚ÇÄ : (polarCoord x).1 ‚â† 0) :
  fderiv ‚Ñù polarCoord x = (fderivPolarCoordSymmEquiv (polarCoord x) h‚ÇÄ).symm := by
  apply HasFDerivAt.fderiv
  apply hasFDerivAt_polarCoord
  exact hx

lemma aux‚ÇÄ (f : ‚Ñù¬≤ ‚âÉL[‚Ñù] ‚Ñù¬≤) :
    ContinuousLinearMap.det f.toContinuousLinearMap =
      LinearMap.det (f.toContinuousLinearMap.toLinearMap) := rfl

lemma aux‚ÇÅ (f : ‚Ñù¬≤ ‚âÉL[‚Ñù] ‚Ñù¬≤) :
    LinearEquiv.det (f.toLinearEquiv) =
      LinearMap.det (f.toLinearEquiv.toLinearMap) := by
  exact LinearEquiv.coe_det f.toLinearEquiv

lemma aux (f : ‚Ñù¬≤ ‚âÉL[‚Ñù] ‚Ñù¬≤) :
    ContinuousLinearMap.det f.toContinuousLinearMap =
      LinearEquiv.det (f.toLinearEquiv) := by
  have : f.toContinuousLinearMap.toLinearMap = f.toLinearEquiv.toLinearMap := by rfl
  rw [aux‚ÇÄ, aux‚ÇÅ, this]

lemma polarCoord_deriv_det (x : ‚Ñù¬≤) (hx : x ‚àà polarCoord.symm.target)
    (h‚ÇÄ : (polarCoord x).1 ‚â† 0) :
    (fderiv ‚Ñù polarCoord x).det = (polarCoord x).1‚Åª¬π := by
  rw [fderivAt_polarCoord x hx h‚ÇÄ]
  rw [fderivPolarCoordSymmEquiv]
  rw [ContinuousLinearEquiv.det_coe_symm]
  rw [aux]
  rw [LinearEquiv.toLinearEquiv_toContinuousLinearEquiv]
  rw [fderivPolarCoordSymmEquiv'_det]

lemma polarCoord_diffble (p : ‚Ñù¬≤) (hp : p ‚àà polarCoord.symm.target)
    (h : (polarCoord p).1 ‚â† 0) : DifferentiableAt ‚Ñù polarCoord p := by
  apply HasFDerivAt.differentiableAt
  apply PartialHomeomorph.hasFDerivAt_symm polarCoord.symm hp
      (f' := (fderivPolarCoordSymmEquiv (polarCoord p) h))
  apply hasFDerivAt_polarCoord_symm (polarCoord p)

lemma jf_eq_1 (p : ‚Ñù¬≤) (h‚ÇÄ : (polarCoord p).1 ‚â† 0)
    (h‚ÇÅ : ¬¨2 / (polarCoord p).1 ^ 2 = -1) (h‚ÇÇ : ¬¨2 / (polarCoord p).1 ^ 2 = 1)
    (hp : p ‚àà polarCoord.symm.target) : (fderiv ‚Ñù f p).det = 1 := by
  rw [f]
  repeat rw [fderiv_comp]
  repeat rw [ContinuousLinearMap.det_comp]
  rw [g_deriv_det _ h‚ÇÄ h‚ÇÅ h‚ÇÇ, polarCoord_deriv_det _ hp h‚ÇÄ, polarCoord_symm_deriv_det]
  dsimp [g]
  simp
  exact CommGroupWithZero.mul_inv_cancel _ h‚ÇÄ
  exact g_diffble _ h‚ÇÄ h‚ÇÅ h‚ÇÇ
  exact polarCoord_diffble _ hp h‚ÇÄ
  exact polarCoord_symm_diffble _
  refine DifferentiableAt.comp p ?_ ?_
  exact g_diffble _ h‚ÇÄ h‚ÇÅ h‚ÇÇ
  exact polarCoord_diffble _ hp h‚ÇÄ
